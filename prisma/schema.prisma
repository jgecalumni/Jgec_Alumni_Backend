// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model members {
  id                  Int      @id @default(autoincrement())
  name                String
  email               String   @unique
  password            String
  studentId           String   @unique
  passingYear         Int
  department          String
  residentialAddress  String
  professionalAddress String
  photo               String
  photo_public_id     String
  receipt             String
  receipt_public_id   String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
}

model Scholarships {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @db.VarChar(200)
  subtitle                String                   @default("") @db.VarChar(200)
  providerName            String                   @db.VarChar(200)
  providerImage           String                   @db.VarChar(200)
  providerImage_public_id String                   @db.VarChar(200)
  providerDepartment      String                   @db.VarChar(200)
  providerPassingYear     Int                      @default(0)
  providerDescription     String                   @db.Text
  description             String                   @db.Text
  whoCanApply             String                   @db.VarChar(500)
  whenToApply             String                   @db.VarChar(500)
  ageLimit                String                   @db.VarChar(500)
  amountDetails           String                   @db.VarChar(500)
  semRequire              String                   @default("1st Sem") @db.VarChar(500)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now())
  scholarshipApplicants   ScholarshipApplication[]
}

model ScholarshipApplication {
  id                        Int          @id @default(autoincrement())
  scholarshipId             Int
  scholarshipDetails        Scholarships @relation(fields: [scholarshipId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name                      String
  studentId                 String
  dob                       String
  homeContactNo             String?
  email                     String
  mobile                    String
  fatherOccupation          String
  noOfFamilyMembers         Int
  noOfEarningMembers        Int?
  familyIncome              Int
  earningPerMember          Int?
  collegeIntakeYear         Int
  extraCurricularActivities String?
  address                   String
  hsPercentage              String
  btechResults              String
  department                String
  achievements              String?
  jobDetails                String?      @default("")
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @default(now())
}

model Notice {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  date           String
  link           String?
  link_public_id String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Event {
  id                 Int             @id @default(autoincrement())
  name               String          @db.VarChar(500)
  shortDescription   String          @db.VarChar(500)
  details            String          @db.VarChar(500)
  event_thumbnail    String          @db.VarChar(500)
  event_thumbnail_id String?         @default("")
  date               String
  time               String
  location           String          @db.VarChar(500)
  hostName           String
  hostDetails        String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @default(now())
  schedule           EventSchedule[]
}

model EventSchedule {
  id        Int      @id @default(autoincrement())
  eventId   Int
  Event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  startTime String
  endTime   String
  activity  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ScholarshipDocuments {
  id             Int     @id @default(autoincrement())
  title          String
  link           String?
  link_public_id String?
}
